# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Apiv3uitrolleyupdateItems(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stockcode': 'float',
        'diagnostics': 'str',
        'quantity': 'float',
        'source': 'str',
        'offer_id': 'object',
        'search_term': 'str',
        'profile_id': 'object',
        'price_level': 'object'
    }

    attribute_map = {
        'stockcode': 'stockcode',
        'diagnostics': 'diagnostics',
        'quantity': 'quantity',
        'source': 'source',
        'offer_id': 'offerId',
        'search_term': 'searchTerm',
        'profile_id': 'profileId',
        'price_level': 'priceLevel'
    }

    def __init__(self, stockcode=None, diagnostics=None, quantity=None, source=None, offer_id=None, search_term=None, profile_id=None, price_level=None):  # noqa: E501
        """Apiv3uitrolleyupdateItems - a model defined in Swagger"""  # noqa: E501
        self._stockcode = None
        self._diagnostics = None
        self._quantity = None
        self._source = None
        self._offer_id = None
        self._search_term = None
        self._profile_id = None
        self._price_level = None
        self.discriminator = None
        if stockcode is not None:
            self.stockcode = stockcode
        if diagnostics is not None:
            self.diagnostics = diagnostics
        if quantity is not None:
            self.quantity = quantity
        if source is not None:
            self.source = source
        if offer_id is not None:
            self.offer_id = offer_id
        if search_term is not None:
            self.search_term = search_term
        if profile_id is not None:
            self.profile_id = profile_id
        if price_level is not None:
            self.price_level = price_level

    @property
    def stockcode(self):
        """Gets the stockcode of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The stockcode of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: float
        """
        return self._stockcode

    @stockcode.setter
    def stockcode(self, stockcode):
        """Sets the stockcode of this Apiv3uitrolleyupdateItems.


        :param stockcode: The stockcode of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: float
        """

        self._stockcode = stockcode

    @property
    def diagnostics(self):
        """Gets the diagnostics of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The diagnostics of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: str
        """
        return self._diagnostics

    @diagnostics.setter
    def diagnostics(self, diagnostics):
        """Sets the diagnostics of this Apiv3uitrolleyupdateItems.


        :param diagnostics: The diagnostics of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: str
        """

        self._diagnostics = diagnostics

    @property
    def quantity(self):
        """Gets the quantity of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The quantity of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Apiv3uitrolleyupdateItems.


        :param quantity: The quantity of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def source(self):
        """Gets the source of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The source of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Apiv3uitrolleyupdateItems.


        :param source: The source of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def offer_id(self):
        """Gets the offer_id of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The offer_id of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: object
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this Apiv3uitrolleyupdateItems.


        :param offer_id: The offer_id of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: object
        """

        self._offer_id = offer_id

    @property
    def search_term(self):
        """Gets the search_term of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The search_term of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this Apiv3uitrolleyupdateItems.


        :param search_term: The search_term of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    @property
    def profile_id(self):
        """Gets the profile_id of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The profile_id of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: object
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this Apiv3uitrolleyupdateItems.


        :param profile_id: The profile_id of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: object
        """

        self._profile_id = profile_id

    @property
    def price_level(self):
        """Gets the price_level of this Apiv3uitrolleyupdateItems.  # noqa: E501


        :return: The price_level of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :rtype: object
        """
        return self._price_level

    @price_level.setter
    def price_level(self, price_level):
        """Sets the price_level of this Apiv3uitrolleyupdateItems.


        :param price_level: The price_level of this Apiv3uitrolleyupdateItems.  # noqa: E501
        :type: object
        """

        self._price_level = price_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Apiv3uitrolleyupdateItems, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Apiv3uitrolleyupdateItems):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
