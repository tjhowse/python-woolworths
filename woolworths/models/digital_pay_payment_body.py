# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DigitalPayPaymentBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payments': 'list[object]',
        'account_amount': 'float',
        'account_password': 'object',
        'openpay_amount': 'float'
    }

    attribute_map = {
        'payments': 'payments',
        'account_amount': 'accountAmount',
        'account_password': 'accountPassword',
        'openpay_amount': 'openpayAmount'
    }

    def __init__(self, payments=None, account_amount=None, account_password=None, openpay_amount=None):  # noqa: E501
        """DigitalPayPaymentBody - a model defined in Swagger"""  # noqa: E501
        self._payments = None
        self._account_amount = None
        self._account_password = None
        self._openpay_amount = None
        self.discriminator = None
        if payments is not None:
            self.payments = payments
        if account_amount is not None:
            self.account_amount = account_amount
        if account_password is not None:
            self.account_password = account_password
        if openpay_amount is not None:
            self.openpay_amount = openpay_amount

    @property
    def payments(self):
        """Gets the payments of this DigitalPayPaymentBody.  # noqa: E501


        :return: The payments of this DigitalPayPaymentBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this DigitalPayPaymentBody.


        :param payments: The payments of this DigitalPayPaymentBody.  # noqa: E501
        :type: list[object]
        """

        self._payments = payments

    @property
    def account_amount(self):
        """Gets the account_amount of this DigitalPayPaymentBody.  # noqa: E501


        :return: The account_amount of this DigitalPayPaymentBody.  # noqa: E501
        :rtype: float
        """
        return self._account_amount

    @account_amount.setter
    def account_amount(self, account_amount):
        """Sets the account_amount of this DigitalPayPaymentBody.


        :param account_amount: The account_amount of this DigitalPayPaymentBody.  # noqa: E501
        :type: float
        """

        self._account_amount = account_amount

    @property
    def account_password(self):
        """Gets the account_password of this DigitalPayPaymentBody.  # noqa: E501


        :return: The account_password of this DigitalPayPaymentBody.  # noqa: E501
        :rtype: object
        """
        return self._account_password

    @account_password.setter
    def account_password(self, account_password):
        """Sets the account_password of this DigitalPayPaymentBody.


        :param account_password: The account_password of this DigitalPayPaymentBody.  # noqa: E501
        :type: object
        """

        self._account_password = account_password

    @property
    def openpay_amount(self):
        """Gets the openpay_amount of this DigitalPayPaymentBody.  # noqa: E501


        :return: The openpay_amount of this DigitalPayPaymentBody.  # noqa: E501
        :rtype: float
        """
        return self._openpay_amount

    @openpay_amount.setter
    def openpay_amount(self, openpay_amount):
        """Sets the openpay_amount of this DigitalPayPaymentBody.


        :param openpay_amount: The openpay_amount of this DigitalPayPaymentBody.  # noqa: E501
        :type: float
        """

        self._openpay_amount = openpay_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DigitalPayPaymentBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DigitalPayPaymentBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
