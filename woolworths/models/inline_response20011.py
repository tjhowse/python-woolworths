# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'products': 'list[object]',
        'corrections': 'object',
        'search_results_count': 'float',
        'visual_shopping_aisle_response': 'list[object]',
        'aggregations': 'list[object]',
        'has_tobacco_items': 'bool',
        'passes': 'object',
        'suggested_term': 'object',
        'facet_filters': 'list[object]'
    }

    attribute_map = {
        'products': 'Products',
        'corrections': 'Corrections',
        'search_results_count': 'SearchResultsCount',
        'visual_shopping_aisle_response': 'VisualShoppingAisleResponse',
        'aggregations': 'Aggregations',
        'has_tobacco_items': 'HasTobaccoItems',
        'passes': 'Passes',
        'suggested_term': 'SuggestedTerm',
        'facet_filters': 'FacetFilters'
    }

    def __init__(self, products=None, corrections=None, search_results_count=None, visual_shopping_aisle_response=None, aggregations=None, has_tobacco_items=None, passes=None, suggested_term=None, facet_filters=None):  # noqa: E501
        """InlineResponse20011 - a model defined in Swagger"""  # noqa: E501
        self._products = None
        self._corrections = None
        self._search_results_count = None
        self._visual_shopping_aisle_response = None
        self._aggregations = None
        self._has_tobacco_items = None
        self._passes = None
        self._suggested_term = None
        self._facet_filters = None
        self.discriminator = None
        if products is not None:
            self.products = products
        if corrections is not None:
            self.corrections = corrections
        if search_results_count is not None:
            self.search_results_count = search_results_count
        if visual_shopping_aisle_response is not None:
            self.visual_shopping_aisle_response = visual_shopping_aisle_response
        if aggregations is not None:
            self.aggregations = aggregations
        if has_tobacco_items is not None:
            self.has_tobacco_items = has_tobacco_items
        if passes is not None:
            self.passes = passes
        if suggested_term is not None:
            self.suggested_term = suggested_term
        if facet_filters is not None:
            self.facet_filters = facet_filters

    @property
    def products(self):
        """Gets the products of this InlineResponse20011.  # noqa: E501


        :return: The products of this InlineResponse20011.  # noqa: E501
        :rtype: list[object]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this InlineResponse20011.


        :param products: The products of this InlineResponse20011.  # noqa: E501
        :type: list[object]
        """

        self._products = products

    @property
    def corrections(self):
        """Gets the corrections of this InlineResponse20011.  # noqa: E501


        :return: The corrections of this InlineResponse20011.  # noqa: E501
        :rtype: object
        """
        return self._corrections

    @corrections.setter
    def corrections(self, corrections):
        """Sets the corrections of this InlineResponse20011.


        :param corrections: The corrections of this InlineResponse20011.  # noqa: E501
        :type: object
        """

        self._corrections = corrections

    @property
    def search_results_count(self):
        """Gets the search_results_count of this InlineResponse20011.  # noqa: E501


        :return: The search_results_count of this InlineResponse20011.  # noqa: E501
        :rtype: float
        """
        return self._search_results_count

    @search_results_count.setter
    def search_results_count(self, search_results_count):
        """Sets the search_results_count of this InlineResponse20011.


        :param search_results_count: The search_results_count of this InlineResponse20011.  # noqa: E501
        :type: float
        """

        self._search_results_count = search_results_count

    @property
    def visual_shopping_aisle_response(self):
        """Gets the visual_shopping_aisle_response of this InlineResponse20011.  # noqa: E501


        :return: The visual_shopping_aisle_response of this InlineResponse20011.  # noqa: E501
        :rtype: list[object]
        """
        return self._visual_shopping_aisle_response

    @visual_shopping_aisle_response.setter
    def visual_shopping_aisle_response(self, visual_shopping_aisle_response):
        """Sets the visual_shopping_aisle_response of this InlineResponse20011.


        :param visual_shopping_aisle_response: The visual_shopping_aisle_response of this InlineResponse20011.  # noqa: E501
        :type: list[object]
        """

        self._visual_shopping_aisle_response = visual_shopping_aisle_response

    @property
    def aggregations(self):
        """Gets the aggregations of this InlineResponse20011.  # noqa: E501


        :return: The aggregations of this InlineResponse20011.  # noqa: E501
        :rtype: list[object]
        """
        return self._aggregations

    @aggregations.setter
    def aggregations(self, aggregations):
        """Sets the aggregations of this InlineResponse20011.


        :param aggregations: The aggregations of this InlineResponse20011.  # noqa: E501
        :type: list[object]
        """

        self._aggregations = aggregations

    @property
    def has_tobacco_items(self):
        """Gets the has_tobacco_items of this InlineResponse20011.  # noqa: E501


        :return: The has_tobacco_items of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._has_tobacco_items

    @has_tobacco_items.setter
    def has_tobacco_items(self, has_tobacco_items):
        """Sets the has_tobacco_items of this InlineResponse20011.


        :param has_tobacco_items: The has_tobacco_items of this InlineResponse20011.  # noqa: E501
        :type: bool
        """

        self._has_tobacco_items = has_tobacco_items

    @property
    def passes(self):
        """Gets the passes of this InlineResponse20011.  # noqa: E501


        :return: The passes of this InlineResponse20011.  # noqa: E501
        :rtype: object
        """
        return self._passes

    @passes.setter
    def passes(self, passes):
        """Sets the passes of this InlineResponse20011.


        :param passes: The passes of this InlineResponse20011.  # noqa: E501
        :type: object
        """

        self._passes = passes

    @property
    def suggested_term(self):
        """Gets the suggested_term of this InlineResponse20011.  # noqa: E501


        :return: The suggested_term of this InlineResponse20011.  # noqa: E501
        :rtype: object
        """
        return self._suggested_term

    @suggested_term.setter
    def suggested_term(self, suggested_term):
        """Sets the suggested_term of this InlineResponse20011.


        :param suggested_term: The suggested_term of this InlineResponse20011.  # noqa: E501
        :type: object
        """

        self._suggested_term = suggested_term

    @property
    def facet_filters(self):
        """Gets the facet_filters of this InlineResponse20011.  # noqa: E501


        :return: The facet_filters of this InlineResponse20011.  # noqa: E501
        :rtype: list[object]
        """
        return self._facet_filters

    @facet_filters.setter
    def facet_filters(self, facet_filters):
        """Sets the facet_filters of this InlineResponse20011.


        :param facet_filters: The facet_filters of this InlineResponse20011.  # noqa: E501
        :type: list[object]
        """

        self._facet_filters = facet_filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20011, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
