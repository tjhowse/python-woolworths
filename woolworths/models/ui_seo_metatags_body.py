# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UiSeoMetatagsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_object': 'str',
        'is_special': 'bool',
        'page_type': 'str',
        'url_path': 'str'
    }

    attribute_map = {
        'format_object': 'FormatObject',
        'is_special': 'IsSpecial',
        'page_type': 'PageType',
        'url_path': 'UrlPath'
    }

    def __init__(self, format_object=None, is_special=None, page_type=None, url_path=None):  # noqa: E501
        """UiSeoMetatagsBody - a model defined in Swagger"""  # noqa: E501
        self._format_object = None
        self._is_special = None
        self._page_type = None
        self._url_path = None
        self.discriminator = None
        if format_object is not None:
            self.format_object = format_object
        if is_special is not None:
            self.is_special = is_special
        if page_type is not None:
            self.page_type = page_type
        if url_path is not None:
            self.url_path = url_path

    @property
    def format_object(self):
        """Gets the format_object of this UiSeoMetatagsBody.  # noqa: E501


        :return: The format_object of this UiSeoMetatagsBody.  # noqa: E501
        :rtype: str
        """
        return self._format_object

    @format_object.setter
    def format_object(self, format_object):
        """Sets the format_object of this UiSeoMetatagsBody.


        :param format_object: The format_object of this UiSeoMetatagsBody.  # noqa: E501
        :type: str
        """

        self._format_object = format_object

    @property
    def is_special(self):
        """Gets the is_special of this UiSeoMetatagsBody.  # noqa: E501


        :return: The is_special of this UiSeoMetatagsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_special

    @is_special.setter
    def is_special(self, is_special):
        """Sets the is_special of this UiSeoMetatagsBody.


        :param is_special: The is_special of this UiSeoMetatagsBody.  # noqa: E501
        :type: bool
        """

        self._is_special = is_special

    @property
    def page_type(self):
        """Gets the page_type of this UiSeoMetatagsBody.  # noqa: E501


        :return: The page_type of this UiSeoMetatagsBody.  # noqa: E501
        :rtype: str
        """
        return self._page_type

    @page_type.setter
    def page_type(self, page_type):
        """Sets the page_type of this UiSeoMetatagsBody.


        :param page_type: The page_type of this UiSeoMetatagsBody.  # noqa: E501
        :type: str
        """

        self._page_type = page_type

    @property
    def url_path(self):
        """Gets the url_path of this UiSeoMetatagsBody.  # noqa: E501


        :return: The url_path of this UiSeoMetatagsBody.  # noqa: E501
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this UiSeoMetatagsBody.


        :param url_path: The url_path of this UiSeoMetatagsBody.  # noqa: E501
        :type: str
        """

        self._url_path = url_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UiSeoMetatagsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UiSeoMetatagsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
