# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20020(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_card': 'object',
        'gift_card': 'object',
        'paypal': 'object',
        'account': 'object',
        'openpay': 'object',
        'success': 'bool',
        'error_message': 'object',
        'last_used_date': 'str',
        'is_impersonated': 'bool'
    }

    attribute_map = {
        'credit_card': 'CreditCard',
        'gift_card': 'GiftCard',
        'paypal': 'Paypal',
        'account': 'Account',
        'openpay': 'Openpay',
        'success': 'Success',
        'error_message': 'ErrorMessage',
        'last_used_date': 'LastUsedDate',
        'is_impersonated': 'IsImpersonated'
    }

    def __init__(self, credit_card=None, gift_card=None, paypal=None, account=None, openpay=None, success=None, error_message=None, last_used_date=None, is_impersonated=None):  # noqa: E501
        """InlineResponse20020 - a model defined in Swagger"""  # noqa: E501
        self._credit_card = None
        self._gift_card = None
        self._paypal = None
        self._account = None
        self._openpay = None
        self._success = None
        self._error_message = None
        self._last_used_date = None
        self._is_impersonated = None
        self.discriminator = None
        if credit_card is not None:
            self.credit_card = credit_card
        if gift_card is not None:
            self.gift_card = gift_card
        if paypal is not None:
            self.paypal = paypal
        if account is not None:
            self.account = account
        if openpay is not None:
            self.openpay = openpay
        if success is not None:
            self.success = success
        if error_message is not None:
            self.error_message = error_message
        if last_used_date is not None:
            self.last_used_date = last_used_date
        if is_impersonated is not None:
            self.is_impersonated = is_impersonated

    @property
    def credit_card(self):
        """Gets the credit_card of this InlineResponse20020.  # noqa: E501


        :return: The credit_card of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this InlineResponse20020.


        :param credit_card: The credit_card of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._credit_card = credit_card

    @property
    def gift_card(self):
        """Gets the gift_card of this InlineResponse20020.  # noqa: E501


        :return: The gift_card of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._gift_card

    @gift_card.setter
    def gift_card(self, gift_card):
        """Sets the gift_card of this InlineResponse20020.


        :param gift_card: The gift_card of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._gift_card = gift_card

    @property
    def paypal(self):
        """Gets the paypal of this InlineResponse20020.  # noqa: E501


        :return: The paypal of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._paypal

    @paypal.setter
    def paypal(self, paypal):
        """Sets the paypal of this InlineResponse20020.


        :param paypal: The paypal of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._paypal = paypal

    @property
    def account(self):
        """Gets the account of this InlineResponse20020.  # noqa: E501


        :return: The account of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this InlineResponse20020.


        :param account: The account of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._account = account

    @property
    def openpay(self):
        """Gets the openpay of this InlineResponse20020.  # noqa: E501


        :return: The openpay of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._openpay

    @openpay.setter
    def openpay(self, openpay):
        """Sets the openpay of this InlineResponse20020.


        :param openpay: The openpay of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._openpay = openpay

    @property
    def success(self):
        """Gets the success of this InlineResponse20020.  # noqa: E501


        :return: The success of this InlineResponse20020.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this InlineResponse20020.


        :param success: The success of this InlineResponse20020.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def error_message(self):
        """Gets the error_message of this InlineResponse20020.  # noqa: E501


        :return: The error_message of this InlineResponse20020.  # noqa: E501
        :rtype: object
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineResponse20020.


        :param error_message: The error_message of this InlineResponse20020.  # noqa: E501
        :type: object
        """

        self._error_message = error_message

    @property
    def last_used_date(self):
        """Gets the last_used_date of this InlineResponse20020.  # noqa: E501


        :return: The last_used_date of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._last_used_date

    @last_used_date.setter
    def last_used_date(self, last_used_date):
        """Sets the last_used_date of this InlineResponse20020.


        :param last_used_date: The last_used_date of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._last_used_date = last_used_date

    @property
    def is_impersonated(self):
        """Gets the is_impersonated of this InlineResponse20020.  # noqa: E501


        :return: The is_impersonated of this InlineResponse20020.  # noqa: E501
        :rtype: bool
        """
        return self._is_impersonated

    @is_impersonated.setter
    def is_impersonated(self, is_impersonated):
        """Sets the is_impersonated of this InlineResponse20020.


        :param is_impersonated: The is_impersonated of this InlineResponse20020.  # noqa: E501
        :type: bool
        """

        self._is_impersonated = is_impersonated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20020, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20020):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
