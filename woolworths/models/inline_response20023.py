# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20023(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delivery_method': 'str',
        'address': 'object',
        'trolley_target': 'object',
        'current_date_at_fulfilment_store': 'str',
        'reserved_date': 'object',
        'reserved_time': 'object',
        'is_delivery_plus_eligible': 'bool',
        'delivery_instructions': 'str',
        'pickup_instructions': 'str',
        'is_non_serviced': 'bool',
        'is_express': 'bool',
        'is_secondary': 'bool',
        'is_crowd_sourced': 'bool',
        'can_leave_unattended': 'bool',
        'market_delivery_details': 'object',
        'window_fee_structure_id': 'float'
    }

    attribute_map = {
        'delivery_method': 'DeliveryMethod',
        'address': 'Address',
        'trolley_target': 'TrolleyTarget',
        'current_date_at_fulfilment_store': 'CurrentDateAtFulfilmentStore',
        'reserved_date': 'ReservedDate',
        'reserved_time': 'ReservedTime',
        'is_delivery_plus_eligible': 'IsDeliveryPlusEligible',
        'delivery_instructions': 'DeliveryInstructions',
        'pickup_instructions': 'PickupInstructions',
        'is_non_serviced': 'IsNonServiced',
        'is_express': 'IsExpress',
        'is_secondary': 'IsSecondary',
        'is_crowd_sourced': 'IsCrowdSourced',
        'can_leave_unattended': 'CanLeaveUnattended',
        'market_delivery_details': 'MarketDeliveryDetails',
        'window_fee_structure_id': 'WindowFeeStructureId'
    }

    def __init__(self, delivery_method=None, address=None, trolley_target=None, current_date_at_fulfilment_store=None, reserved_date=None, reserved_time=None, is_delivery_plus_eligible=None, delivery_instructions=None, pickup_instructions=None, is_non_serviced=None, is_express=None, is_secondary=None, is_crowd_sourced=None, can_leave_unattended=None, market_delivery_details=None, window_fee_structure_id=None):  # noqa: E501
        """InlineResponse20023 - a model defined in Swagger"""  # noqa: E501
        self._delivery_method = None
        self._address = None
        self._trolley_target = None
        self._current_date_at_fulfilment_store = None
        self._reserved_date = None
        self._reserved_time = None
        self._is_delivery_plus_eligible = None
        self._delivery_instructions = None
        self._pickup_instructions = None
        self._is_non_serviced = None
        self._is_express = None
        self._is_secondary = None
        self._is_crowd_sourced = None
        self._can_leave_unattended = None
        self._market_delivery_details = None
        self._window_fee_structure_id = None
        self.discriminator = None
        if delivery_method is not None:
            self.delivery_method = delivery_method
        if address is not None:
            self.address = address
        if trolley_target is not None:
            self.trolley_target = trolley_target
        if current_date_at_fulfilment_store is not None:
            self.current_date_at_fulfilment_store = current_date_at_fulfilment_store
        if reserved_date is not None:
            self.reserved_date = reserved_date
        if reserved_time is not None:
            self.reserved_time = reserved_time
        if is_delivery_plus_eligible is not None:
            self.is_delivery_plus_eligible = is_delivery_plus_eligible
        if delivery_instructions is not None:
            self.delivery_instructions = delivery_instructions
        if pickup_instructions is not None:
            self.pickup_instructions = pickup_instructions
        if is_non_serviced is not None:
            self.is_non_serviced = is_non_serviced
        if is_express is not None:
            self.is_express = is_express
        if is_secondary is not None:
            self.is_secondary = is_secondary
        if is_crowd_sourced is not None:
            self.is_crowd_sourced = is_crowd_sourced
        if can_leave_unattended is not None:
            self.can_leave_unattended = can_leave_unattended
        if market_delivery_details is not None:
            self.market_delivery_details = market_delivery_details
        if window_fee_structure_id is not None:
            self.window_fee_structure_id = window_fee_structure_id

    @property
    def delivery_method(self):
        """Gets the delivery_method of this InlineResponse20023.  # noqa: E501


        :return: The delivery_method of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method):
        """Sets the delivery_method of this InlineResponse20023.


        :param delivery_method: The delivery_method of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._delivery_method = delivery_method

    @property
    def address(self):
        """Gets the address of this InlineResponse20023.  # noqa: E501


        :return: The address of this InlineResponse20023.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this InlineResponse20023.


        :param address: The address of this InlineResponse20023.  # noqa: E501
        :type: object
        """

        self._address = address

    @property
    def trolley_target(self):
        """Gets the trolley_target of this InlineResponse20023.  # noqa: E501


        :return: The trolley_target of this InlineResponse20023.  # noqa: E501
        :rtype: object
        """
        return self._trolley_target

    @trolley_target.setter
    def trolley_target(self, trolley_target):
        """Sets the trolley_target of this InlineResponse20023.


        :param trolley_target: The trolley_target of this InlineResponse20023.  # noqa: E501
        :type: object
        """

        self._trolley_target = trolley_target

    @property
    def current_date_at_fulfilment_store(self):
        """Gets the current_date_at_fulfilment_store of this InlineResponse20023.  # noqa: E501


        :return: The current_date_at_fulfilment_store of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._current_date_at_fulfilment_store

    @current_date_at_fulfilment_store.setter
    def current_date_at_fulfilment_store(self, current_date_at_fulfilment_store):
        """Sets the current_date_at_fulfilment_store of this InlineResponse20023.


        :param current_date_at_fulfilment_store: The current_date_at_fulfilment_store of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._current_date_at_fulfilment_store = current_date_at_fulfilment_store

    @property
    def reserved_date(self):
        """Gets the reserved_date of this InlineResponse20023.  # noqa: E501


        :return: The reserved_date of this InlineResponse20023.  # noqa: E501
        :rtype: object
        """
        return self._reserved_date

    @reserved_date.setter
    def reserved_date(self, reserved_date):
        """Sets the reserved_date of this InlineResponse20023.


        :param reserved_date: The reserved_date of this InlineResponse20023.  # noqa: E501
        :type: object
        """

        self._reserved_date = reserved_date

    @property
    def reserved_time(self):
        """Gets the reserved_time of this InlineResponse20023.  # noqa: E501


        :return: The reserved_time of this InlineResponse20023.  # noqa: E501
        :rtype: object
        """
        return self._reserved_time

    @reserved_time.setter
    def reserved_time(self, reserved_time):
        """Sets the reserved_time of this InlineResponse20023.


        :param reserved_time: The reserved_time of this InlineResponse20023.  # noqa: E501
        :type: object
        """

        self._reserved_time = reserved_time

    @property
    def is_delivery_plus_eligible(self):
        """Gets the is_delivery_plus_eligible of this InlineResponse20023.  # noqa: E501


        :return: The is_delivery_plus_eligible of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._is_delivery_plus_eligible

    @is_delivery_plus_eligible.setter
    def is_delivery_plus_eligible(self, is_delivery_plus_eligible):
        """Sets the is_delivery_plus_eligible of this InlineResponse20023.


        :param is_delivery_plus_eligible: The is_delivery_plus_eligible of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._is_delivery_plus_eligible = is_delivery_plus_eligible

    @property
    def delivery_instructions(self):
        """Gets the delivery_instructions of this InlineResponse20023.  # noqa: E501


        :return: The delivery_instructions of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._delivery_instructions

    @delivery_instructions.setter
    def delivery_instructions(self, delivery_instructions):
        """Sets the delivery_instructions of this InlineResponse20023.


        :param delivery_instructions: The delivery_instructions of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._delivery_instructions = delivery_instructions

    @property
    def pickup_instructions(self):
        """Gets the pickup_instructions of this InlineResponse20023.  # noqa: E501


        :return: The pickup_instructions of this InlineResponse20023.  # noqa: E501
        :rtype: str
        """
        return self._pickup_instructions

    @pickup_instructions.setter
    def pickup_instructions(self, pickup_instructions):
        """Sets the pickup_instructions of this InlineResponse20023.


        :param pickup_instructions: The pickup_instructions of this InlineResponse20023.  # noqa: E501
        :type: str
        """

        self._pickup_instructions = pickup_instructions

    @property
    def is_non_serviced(self):
        """Gets the is_non_serviced of this InlineResponse20023.  # noqa: E501


        :return: The is_non_serviced of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._is_non_serviced

    @is_non_serviced.setter
    def is_non_serviced(self, is_non_serviced):
        """Sets the is_non_serviced of this InlineResponse20023.


        :param is_non_serviced: The is_non_serviced of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._is_non_serviced = is_non_serviced

    @property
    def is_express(self):
        """Gets the is_express of this InlineResponse20023.  # noqa: E501


        :return: The is_express of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._is_express

    @is_express.setter
    def is_express(self, is_express):
        """Sets the is_express of this InlineResponse20023.


        :param is_express: The is_express of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._is_express = is_express

    @property
    def is_secondary(self):
        """Gets the is_secondary of this InlineResponse20023.  # noqa: E501


        :return: The is_secondary of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._is_secondary

    @is_secondary.setter
    def is_secondary(self, is_secondary):
        """Sets the is_secondary of this InlineResponse20023.


        :param is_secondary: The is_secondary of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._is_secondary = is_secondary

    @property
    def is_crowd_sourced(self):
        """Gets the is_crowd_sourced of this InlineResponse20023.  # noqa: E501


        :return: The is_crowd_sourced of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._is_crowd_sourced

    @is_crowd_sourced.setter
    def is_crowd_sourced(self, is_crowd_sourced):
        """Sets the is_crowd_sourced of this InlineResponse20023.


        :param is_crowd_sourced: The is_crowd_sourced of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._is_crowd_sourced = is_crowd_sourced

    @property
    def can_leave_unattended(self):
        """Gets the can_leave_unattended of this InlineResponse20023.  # noqa: E501


        :return: The can_leave_unattended of this InlineResponse20023.  # noqa: E501
        :rtype: bool
        """
        return self._can_leave_unattended

    @can_leave_unattended.setter
    def can_leave_unattended(self, can_leave_unattended):
        """Sets the can_leave_unattended of this InlineResponse20023.


        :param can_leave_unattended: The can_leave_unattended of this InlineResponse20023.  # noqa: E501
        :type: bool
        """

        self._can_leave_unattended = can_leave_unattended

    @property
    def market_delivery_details(self):
        """Gets the market_delivery_details of this InlineResponse20023.  # noqa: E501


        :return: The market_delivery_details of this InlineResponse20023.  # noqa: E501
        :rtype: object
        """
        return self._market_delivery_details

    @market_delivery_details.setter
    def market_delivery_details(self, market_delivery_details):
        """Sets the market_delivery_details of this InlineResponse20023.


        :param market_delivery_details: The market_delivery_details of this InlineResponse20023.  # noqa: E501
        :type: object
        """

        self._market_delivery_details = market_delivery_details

    @property
    def window_fee_structure_id(self):
        """Gets the window_fee_structure_id of this InlineResponse20023.  # noqa: E501


        :return: The window_fee_structure_id of this InlineResponse20023.  # noqa: E501
        :rtype: float
        """
        return self._window_fee_structure_id

    @window_fee_structure_id.setter
    def window_fee_structure_id(self, window_fee_structure_id):
        """Sets the window_fee_structure_id of this InlineResponse20023.


        :param window_fee_structure_id: The window_fee_structure_id of this InlineResponse20023.  # noqa: E501
        :type: float
        """

        self._window_fee_structure_id = window_fee_structure_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20023, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20023):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
