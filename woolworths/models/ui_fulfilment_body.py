# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UiFulfilmentBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_id': 'float',
        'fulfilment_method': 'str',
        'timeslot_id': 'float',
        'trading_account': 'object',
        'window_date': 'str'
    }

    attribute_map = {
        'address_id': 'addressId',
        'fulfilment_method': 'fulfilmentMethod',
        'timeslot_id': 'timeslotId',
        'trading_account': 'tradingAccount',
        'window_date': 'windowDate'
    }

    def __init__(self, address_id=None, fulfilment_method=None, timeslot_id=None, trading_account=None, window_date=None):  # noqa: E501
        """UiFulfilmentBody - a model defined in Swagger"""  # noqa: E501
        self._address_id = None
        self._fulfilment_method = None
        self._timeslot_id = None
        self._trading_account = None
        self._window_date = None
        self.discriminator = None
        if address_id is not None:
            self.address_id = address_id
        if fulfilment_method is not None:
            self.fulfilment_method = fulfilment_method
        if timeslot_id is not None:
            self.timeslot_id = timeslot_id
        if trading_account is not None:
            self.trading_account = trading_account
        if window_date is not None:
            self.window_date = window_date

    @property
    def address_id(self):
        """Gets the address_id of this UiFulfilmentBody.  # noqa: E501


        :return: The address_id of this UiFulfilmentBody.  # noqa: E501
        :rtype: float
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this UiFulfilmentBody.


        :param address_id: The address_id of this UiFulfilmentBody.  # noqa: E501
        :type: float
        """

        self._address_id = address_id

    @property
    def fulfilment_method(self):
        """Gets the fulfilment_method of this UiFulfilmentBody.  # noqa: E501


        :return: The fulfilment_method of this UiFulfilmentBody.  # noqa: E501
        :rtype: str
        """
        return self._fulfilment_method

    @fulfilment_method.setter
    def fulfilment_method(self, fulfilment_method):
        """Sets the fulfilment_method of this UiFulfilmentBody.


        :param fulfilment_method: The fulfilment_method of this UiFulfilmentBody.  # noqa: E501
        :type: str
        """

        self._fulfilment_method = fulfilment_method

    @property
    def timeslot_id(self):
        """Gets the timeslot_id of this UiFulfilmentBody.  # noqa: E501


        :return: The timeslot_id of this UiFulfilmentBody.  # noqa: E501
        :rtype: float
        """
        return self._timeslot_id

    @timeslot_id.setter
    def timeslot_id(self, timeslot_id):
        """Sets the timeslot_id of this UiFulfilmentBody.


        :param timeslot_id: The timeslot_id of this UiFulfilmentBody.  # noqa: E501
        :type: float
        """

        self._timeslot_id = timeslot_id

    @property
    def trading_account(self):
        """Gets the trading_account of this UiFulfilmentBody.  # noqa: E501


        :return: The trading_account of this UiFulfilmentBody.  # noqa: E501
        :rtype: object
        """
        return self._trading_account

    @trading_account.setter
    def trading_account(self, trading_account):
        """Sets the trading_account of this UiFulfilmentBody.


        :param trading_account: The trading_account of this UiFulfilmentBody.  # noqa: E501
        :type: object
        """

        self._trading_account = trading_account

    @property
    def window_date(self):
        """Gets the window_date of this UiFulfilmentBody.  # noqa: E501


        :return: The window_date of this UiFulfilmentBody.  # noqa: E501
        :rtype: str
        """
        return self._window_date

    @window_date.setter
    def window_date(self, window_date):
        """Sets the window_date of this UiFulfilmentBody.


        :param window_date: The window_date of this UiFulfilmentBody.  # noqa: E501
        :type: str
        """

        self._window_date = window_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UiFulfilmentBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UiFulfilmentBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
