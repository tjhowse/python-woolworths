# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20027(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'partial_success': 'bool',
        'transaction_receipt': 'object',
        'payment_responses': 'object',
        'error_code': 'str',
        'error_detail': 'object',
        'result': 'bool',
        'error_message': 'object',
        'placed_order_id': 'object',
        'order_reference': 'object',
        'order_placement_errors': 'list[object]',
        'model': 'object'
    }

    attribute_map = {
        'partial_success': 'PartialSuccess',
        'transaction_receipt': 'TransactionReceipt',
        'payment_responses': 'PaymentResponses',
        'error_code': 'ErrorCode',
        'error_detail': 'ErrorDetail',
        'result': 'Result',
        'error_message': 'ErrorMessage',
        'placed_order_id': 'PlacedOrderId',
        'order_reference': 'OrderReference',
        'order_placement_errors': 'OrderPlacementErrors',
        'model': 'Model'
    }

    def __init__(self, partial_success=None, transaction_receipt=None, payment_responses=None, error_code=None, error_detail=None, result=None, error_message=None, placed_order_id=None, order_reference=None, order_placement_errors=None, model=None):  # noqa: E501
        """InlineResponse20027 - a model defined in Swagger"""  # noqa: E501
        self._partial_success = None
        self._transaction_receipt = None
        self._payment_responses = None
        self._error_code = None
        self._error_detail = None
        self._result = None
        self._error_message = None
        self._placed_order_id = None
        self._order_reference = None
        self._order_placement_errors = None
        self._model = None
        self.discriminator = None
        if partial_success is not None:
            self.partial_success = partial_success
        if transaction_receipt is not None:
            self.transaction_receipt = transaction_receipt
        if payment_responses is not None:
            self.payment_responses = payment_responses
        if error_code is not None:
            self.error_code = error_code
        if error_detail is not None:
            self.error_detail = error_detail
        if result is not None:
            self.result = result
        if error_message is not None:
            self.error_message = error_message
        if placed_order_id is not None:
            self.placed_order_id = placed_order_id
        if order_reference is not None:
            self.order_reference = order_reference
        if order_placement_errors is not None:
            self.order_placement_errors = order_placement_errors
        if model is not None:
            self.model = model

    @property
    def partial_success(self):
        """Gets the partial_success of this InlineResponse20027.  # noqa: E501


        :return: The partial_success of this InlineResponse20027.  # noqa: E501
        :rtype: bool
        """
        return self._partial_success

    @partial_success.setter
    def partial_success(self, partial_success):
        """Sets the partial_success of this InlineResponse20027.


        :param partial_success: The partial_success of this InlineResponse20027.  # noqa: E501
        :type: bool
        """

        self._partial_success = partial_success

    @property
    def transaction_receipt(self):
        """Gets the transaction_receipt of this InlineResponse20027.  # noqa: E501


        :return: The transaction_receipt of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._transaction_receipt

    @transaction_receipt.setter
    def transaction_receipt(self, transaction_receipt):
        """Sets the transaction_receipt of this InlineResponse20027.


        :param transaction_receipt: The transaction_receipt of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._transaction_receipt = transaction_receipt

    @property
    def payment_responses(self):
        """Gets the payment_responses of this InlineResponse20027.  # noqa: E501


        :return: The payment_responses of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._payment_responses

    @payment_responses.setter
    def payment_responses(self, payment_responses):
        """Sets the payment_responses of this InlineResponse20027.


        :param payment_responses: The payment_responses of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._payment_responses = payment_responses

    @property
    def error_code(self):
        """Gets the error_code of this InlineResponse20027.  # noqa: E501


        :return: The error_code of this InlineResponse20027.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this InlineResponse20027.


        :param error_code: The error_code of this InlineResponse20027.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_detail(self):
        """Gets the error_detail of this InlineResponse20027.  # noqa: E501


        :return: The error_detail of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._error_detail

    @error_detail.setter
    def error_detail(self, error_detail):
        """Sets the error_detail of this InlineResponse20027.


        :param error_detail: The error_detail of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._error_detail = error_detail

    @property
    def result(self):
        """Gets the result of this InlineResponse20027.  # noqa: E501


        :return: The result of this InlineResponse20027.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse20027.


        :param result: The result of this InlineResponse20027.  # noqa: E501
        :type: bool
        """

        self._result = result

    @property
    def error_message(self):
        """Gets the error_message of this InlineResponse20027.  # noqa: E501


        :return: The error_message of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InlineResponse20027.


        :param error_message: The error_message of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._error_message = error_message

    @property
    def placed_order_id(self):
        """Gets the placed_order_id of this InlineResponse20027.  # noqa: E501


        :return: The placed_order_id of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._placed_order_id

    @placed_order_id.setter
    def placed_order_id(self, placed_order_id):
        """Sets the placed_order_id of this InlineResponse20027.


        :param placed_order_id: The placed_order_id of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._placed_order_id = placed_order_id

    @property
    def order_reference(self):
        """Gets the order_reference of this InlineResponse20027.  # noqa: E501


        :return: The order_reference of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this InlineResponse20027.


        :param order_reference: The order_reference of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._order_reference = order_reference

    @property
    def order_placement_errors(self):
        """Gets the order_placement_errors of this InlineResponse20027.  # noqa: E501


        :return: The order_placement_errors of this InlineResponse20027.  # noqa: E501
        :rtype: list[object]
        """
        return self._order_placement_errors

    @order_placement_errors.setter
    def order_placement_errors(self, order_placement_errors):
        """Sets the order_placement_errors of this InlineResponse20027.


        :param order_placement_errors: The order_placement_errors of this InlineResponse20027.  # noqa: E501
        :type: list[object]
        """

        self._order_placement_errors = order_placement_errors

    @property
    def model(self):
        """Gets the model of this InlineResponse20027.  # noqa: E501


        :return: The model of this InlineResponse20027.  # noqa: E501
        :rtype: object
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this InlineResponse20027.


        :param model: The model of this InlineResponse20027.  # noqa: E501
        :type: object
        """

        self._model = model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20027, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20027):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
