# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SearchProductsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'list[object]',
        'is_special': 'bool',
        'location': 'str',
        'page_number': 'float',
        'page_size': 'float',
        'search_term': 'str',
        'sort_type': 'str'
    }

    attribute_map = {
        'filters': 'Filters',
        'is_special': 'IsSpecial',
        'location': 'Location',
        'page_number': 'PageNumber',
        'page_size': 'PageSize',
        'search_term': 'SearchTerm',
        'sort_type': 'SortType'
    }

    def __init__(self, filters=None, is_special=None, location=None, page_number=None, page_size=None, search_term=None, sort_type=None):  # noqa: E501
        """SearchProductsBody - a model defined in Swagger"""  # noqa: E501
        self._filters = None
        self._is_special = None
        self._location = None
        self._page_number = None
        self._page_size = None
        self._search_term = None
        self._sort_type = None
        self.discriminator = None
        if filters is not None:
            self.filters = filters
        if is_special is not None:
            self.is_special = is_special
        if location is not None:
            self.location = location
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if search_term is not None:
            self.search_term = search_term
        if sort_type is not None:
            self.sort_type = sort_type

    @property
    def filters(self):
        """Gets the filters of this SearchProductsBody.  # noqa: E501


        :return: The filters of this SearchProductsBody.  # noqa: E501
        :rtype: list[object]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this SearchProductsBody.


        :param filters: The filters of this SearchProductsBody.  # noqa: E501
        :type: list[object]
        """

        self._filters = filters

    @property
    def is_special(self):
        """Gets the is_special of this SearchProductsBody.  # noqa: E501


        :return: The is_special of this SearchProductsBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_special

    @is_special.setter
    def is_special(self, is_special):
        """Sets the is_special of this SearchProductsBody.


        :param is_special: The is_special of this SearchProductsBody.  # noqa: E501
        :type: bool
        """

        self._is_special = is_special

    @property
    def location(self):
        """Gets the location of this SearchProductsBody.  # noqa: E501


        :return: The location of this SearchProductsBody.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SearchProductsBody.


        :param location: The location of this SearchProductsBody.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def page_number(self):
        """Gets the page_number of this SearchProductsBody.  # noqa: E501


        :return: The page_number of this SearchProductsBody.  # noqa: E501
        :rtype: float
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this SearchProductsBody.


        :param page_number: The page_number of this SearchProductsBody.  # noqa: E501
        :type: float
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this SearchProductsBody.  # noqa: E501


        :return: The page_size of this SearchProductsBody.  # noqa: E501
        :rtype: float
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SearchProductsBody.


        :param page_size: The page_size of this SearchProductsBody.  # noqa: E501
        :type: float
        """

        self._page_size = page_size

    @property
    def search_term(self):
        """Gets the search_term of this SearchProductsBody.  # noqa: E501


        :return: The search_term of this SearchProductsBody.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this SearchProductsBody.


        :param search_term: The search_term of this SearchProductsBody.  # noqa: E501
        :type: str
        """

        self._search_term = search_term

    @property
    def sort_type(self):
        """Gets the sort_type of this SearchProductsBody.  # noqa: E501


        :return: The sort_type of this SearchProductsBody.  # noqa: E501
        :rtype: str
        """
        return self._sort_type

    @sort_type.setter
    def sort_type(self, sort_type):
        """Sets the sort_type of this SearchProductsBody.


        :param sort_type: The sort_type of this SearchProductsBody.  # noqa: E501
        :type: str
        """

        self._sort_type = sort_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchProductsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchProductsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
