# coding: utf-8

"""
    flows_filtered Mitmproxy2Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginLoginwithcredentialBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'password': 'str',
        'remember_me': 'bool',
        'link_token': 'object',
        'user_id_from_agent': 'object'
    }

    attribute_map = {
        'email': 'Email',
        'password': 'Password',
        'remember_me': 'RememberMe',
        'link_token': 'LinkToken',
        'user_id_from_agent': 'UserIdFromAgent'
    }

    def __init__(self, email=None, password=None, remember_me=None, link_token=None, user_id_from_agent=None):  # noqa: E501
        """LoginLoginwithcredentialBody - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._password = None
        self._remember_me = None
        self._link_token = None
        self._user_id_from_agent = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if password is not None:
            self.password = password
        if remember_me is not None:
            self.remember_me = remember_me
        if link_token is not None:
            self.link_token = link_token
        if user_id_from_agent is not None:
            self.user_id_from_agent = user_id_from_agent

    @property
    def email(self):
        """Gets the email of this LoginLoginwithcredentialBody.  # noqa: E501


        :return: The email of this LoginLoginwithcredentialBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this LoginLoginwithcredentialBody.


        :param email: The email of this LoginLoginwithcredentialBody.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this LoginLoginwithcredentialBody.  # noqa: E501


        :return: The password of this LoginLoginwithcredentialBody.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginLoginwithcredentialBody.


        :param password: The password of this LoginLoginwithcredentialBody.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def remember_me(self):
        """Gets the remember_me of this LoginLoginwithcredentialBody.  # noqa: E501


        :return: The remember_me of this LoginLoginwithcredentialBody.  # noqa: E501
        :rtype: bool
        """
        return self._remember_me

    @remember_me.setter
    def remember_me(self, remember_me):
        """Sets the remember_me of this LoginLoginwithcredentialBody.


        :param remember_me: The remember_me of this LoginLoginwithcredentialBody.  # noqa: E501
        :type: bool
        """

        self._remember_me = remember_me

    @property
    def link_token(self):
        """Gets the link_token of this LoginLoginwithcredentialBody.  # noqa: E501


        :return: The link_token of this LoginLoginwithcredentialBody.  # noqa: E501
        :rtype: object
        """
        return self._link_token

    @link_token.setter
    def link_token(self, link_token):
        """Sets the link_token of this LoginLoginwithcredentialBody.


        :param link_token: The link_token of this LoginLoginwithcredentialBody.  # noqa: E501
        :type: object
        """

        self._link_token = link_token

    @property
    def user_id_from_agent(self):
        """Gets the user_id_from_agent of this LoginLoginwithcredentialBody.  # noqa: E501


        :return: The user_id_from_agent of this LoginLoginwithcredentialBody.  # noqa: E501
        :rtype: object
        """
        return self._user_id_from_agent

    @user_id_from_agent.setter
    def user_id_from_agent(self, user_id_from_agent):
        """Sets the user_id_from_agent of this LoginLoginwithcredentialBody.


        :param user_id_from_agent: The user_id_from_agent of this LoginLoginwithcredentialBody.  # noqa: E501
        :type: object
        """

        self._user_id_from_agent = user_id_from_agent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginLoginwithcredentialBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginLoginwithcredentialBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
